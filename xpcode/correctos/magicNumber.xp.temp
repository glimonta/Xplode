
#############################################################
#B1
#############################################################

#Este es el código generado por la linea 18 de la instrucción while que inicia en begin_while_18_1 y termina en next_while_18_1
begin_while_18_1:
#Este es el código generado por la linea 18 de la llamada a la función: magicNumber
param n
t1 call magicNumber 1
if t1 goto next_while_18_1

#############################################################
#B2
#############################################################

goto true_while_18_1

#############################################################
#B3
#############################################################

true_while_18_1:
read t2 2
n := t2
#Este es el código generado por la linea 20 de la instrucción if que termina en next_if_20_1
t3 == n 42
ifnot t3 goto next_if_20_1

#############################################################
#B4
#############################################################

write "n es 42"
#Este es el código generado por la linea 0 de la instrucción continue
goto begin_while_18_1

#############################################################
#B5
#############################################################

next_if_20_1:
write "Not magical, try again!\n"
goto begin_while_18_1

#############################################################
#B6
#############################################################

next_while_18_1:
write "SUCCESS!"
#Este es el código generado por la linea 28 de la instrucción sleep
sleep 42
#Este es el código generado por la linea 29 de la instrucción sleep
sleep 21
exit

#############################################################
#B7
#############################################################

#Definición de Función magicNumber: linea 3
magicNumber:
#Este es el código generado por la linea 5 de la instrucción if que termina en next_if_5_1
t4 < k 2
ifnot t4 goto next_if_5_1

#############################################################
#B8
#############################################################

#Este es el código generado por la linea 6 de la instrucción return
return false

#############################################################
#B9
#############################################################

next_if_5_1:
#Este es el código generado por la linea 8 de la instrucción for que inicia en begin_for_8_1 y termina en end_for_8_1
#Este es el código generado por la linea 8 de la instrucción k := 2
k := 2
goto first_for_8_1

#############################################################
#B10
#############################################################

begin_for_8_1:
#Este es el código generado por la linea 8 de la instrucción k := k + 1
t5 + k 1
k := t5

#############################################################
#B11
#############################################################

first_for_8_1:
t6 < k n
if t6 goto mid1

#############################################################
#B12
#############################################################

goto end_for_8_1

#############################################################
#B13
#############################################################

mid1:
#Este es el código generado por la linea 9 de la instrucción if que termina en next_if_9_1
t7 / n k
t8 == t7 0
ifnot t8 goto next_if_9_1

#############################################################
#B14
#############################################################

#Este es el código generado por la linea 10 de la instrucción return
return false

#############################################################
#B15
#############################################################

next_if_9_1:
goto begin_for_8_1

#############################################################
#B16
#############################################################

end_for_8_1:
#Este es el código generado por la linea 13 de la instrucción return
return true
