string_7_1 : "Escriba el tamanio del arreglo\n"
string_7_2 : "Escriba los elementos del arreglo\n"
string_7_3 : "Arreglo ordenado:\n"
string_7_4 : " "
string_7_5 : "Arreglo ordenado:\n"
string_7_6 : " "
string_7_7 : "\n"

#############################################################
#B1
#############################################################


allocate 408
#Este es el código generado por la linea 47 de la instrucción write
write string_7_1 9
read t1 2
tam := t1
#Este es el código generado por la linea 50 de la instrucción i := 0
i := 0
#Este es el código generado por la linea 52 de la instrucción write
write string_7_2 9
#############################################################
#B2
#############################################################


#Este es el código generado por la linea 53 de la instrucción while que inicia en begin_while_53_1 y termina en next_while_53_1
begin_while_53_1:
t2 < i tam
if t2 goto true_while_53_1
#############################################################
#B3
#############################################################


goto next_while_53_1
#############################################################
#B4
#############################################################


true_while_53_1:
read t3 2
t4 * i 4
x t4 []:= t3
#Este es el código generado por la linea 55 de la instrucción i := i + 1
t6 + i 1
i := t6
goto begin_while_53_1
#############################################################
#B5
#############################################################


next_while_53_1:
#Este es el código generado por la linea 58 de la instrucción i := 0
i := 0
#Este es el código generado por la linea 59 de la instrucción write
write string_7_3 9
#############################################################
#B6
#############################################################


#Este es el código generado por la linea 60 de la instrucción while que inicia en begin_while_60_1 y termina en next_while_60_1
begin_while_60_1:
t7 < i tam
if t7 goto true_while_60_1
#############################################################
#B7
#############################################################


goto next_while_60_1
#############################################################
#B8
#############################################################


true_while_60_1:
#Este es el código generado por la linea 61 de la instrucción write
t8 * i 4
t9 :=[] x t8
write t9 2
write string_7_4 9
#Este es el código generado por la linea 62 de la instrucción i := i + 1
t10 + i 1
i := t10
goto begin_while_60_1
#############################################################
#B9
#############################################################


next_while_60_1:
#Este es el código generado por la linea 65 de la llamada a la función: quicksort
begin_function
#Aquí debería pasar el parámetro que es un arreglo pero me falta solucionar lo del dope vector
param_ref x  
param 50
param 1
param 4
t11 - tam 1
param t11
param 0
t12 call quicksort 3
epilogue t12 32
#Este es el código generado por la linea 66 de la instrucción i := 0
i := 0
#Este es el código generado por la linea 67 de la instrucción write
write string_7_5 9
#############################################################
#B10
#############################################################


#Este es el código generado por la linea 68 de la instrucción while que inicia en begin_while_68_1 y termina en next_while_68_1
begin_while_68_1:
t13 < i tam
if t13 goto true_while_68_1
#############################################################
#B11
#############################################################


goto next_while_68_1
#############################################################
#B12
#############################################################


true_while_68_1:
#Este es el código generado por la linea 69 de la instrucción write
t14 * i 4
t15 :=[] x t14
write t15 2
write string_7_6 9
#Este es el código generado por la linea 70 de la instrucción i := i + 1
t16 + i 1
i := t16
goto begin_while_68_1
#############################################################
#B13
#############################################################


next_while_68_1:
#Este es el código generado por la linea 72 de la instrucción write
write string_7_7 9
exit
#############################################################
#B14
#############################################################


#Definición de Función quicksort: linea 3
quicksort:
prologue 16
#Este es el código generado por la linea 6 de la instrucción if que termina en next_if_6_1
t17 <= n m
ifnot t17 goto next_if_6_1
#############################################################
#B15
#############################################################


#Este es el código generado por la linea 7 de la instrucción return
return
#############################################################
#B16
#############################################################


next_if_6_1:
#Este es el código generado por la linea 10 de la instrucción i := m - 1
t18 - m 1
i := t18
#Este es el código generado por la linea 11 de la instrucción j := n
j := n
#Este es el código generado por la linea 12 de la instrucción v := a[n]
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t19 + bp 16
=* t20 t19
t21 * n t20
t22 :=[] a t21
v := t22
#############################################################
#B17
#############################################################


#Este es el código generado por la linea 14 de la instrucción while que inicia en begin_while_14_1 y termina en next_while_14_1
begin_while_14_1:
goto true_while_14_1
#############################################################
#B18
#############################################################


true_while_14_1:
#Este es el código generado por la linea 16 de la instrucción i := i + 1
t23 + i 1
i := t23
#############################################################
#B19
#############################################################


#Este es el código generado por la linea 17 de la instrucción while que inicia en begin_while_17_1 y termina en next_while_17_1
begin_while_17_1:
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t24 + bp 16
=* t25 t24
t26 * i t25
t27 :=[] a t26
t28 < t27 v
if t28 goto true_while_17_1
#############################################################
#B20
#############################################################


goto next_while_17_1
#############################################################
#B21
#############################################################


true_while_17_1:
#Este es el código generado por la linea 18 de la instrucción i := i + 1
t29 + i 1
i := t29
goto begin_while_17_1
#############################################################
#B22
#############################################################


next_while_17_1:
#Este es el código generado por la linea 21 de la instrucción j := j - 1
t30 - j 1
j := t30
#############################################################
#B23
#############################################################


#Este es el código generado por la linea 22 de la instrucción while que inicia en begin_while_22_1 y termina en next_while_22_1
begin_while_22_1:
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t31 + bp 16
=* t32 t31
t33 * j t32
t34 :=[] a t33
t35 > t34 v
if t35 goto true_while_22_1
#############################################################
#B24
#############################################################


goto next_while_22_1
#############################################################
#B25
#############################################################


true_while_22_1:
#Este es el código generado por la linea 23 de la instrucción j := j - 1
t36 - j 1
j := t36
goto begin_while_22_1
#############################################################
#B26
#############################################################


next_while_22_1:
#Este es el código generado por la linea 25 de la instrucción if que termina en next_if_25_1
t37 >= i j
ifnot t37 goto next_if_25_1
#############################################################
#B27
#############################################################


#Este es el código generado por la linea 26 de la instrucción break
goto next_while_14_1
#############################################################
#B28
#############################################################


next_if_25_1:
#Este es el código generado por la linea 29 de la instrucción x := a[i]
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t38 + bp 16
=* t39 t38
t40 * i t39
t41 :=[] a t40
x := t41
#Este es el código generado por la linea 30 de la instrucción a[i] := a[j]
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t42 + bp 16
=* t43 t42
t44 * j t43
t45 :=[] a t44
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t46 + bp 16
=* t47 t46
t48 * i t47
a t48 []:= t45
#Este es el código generado por la linea 31 de la instrucción a[j] := x
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t50 + bp 16
=* t51 t50
t52 * j t51
a t52 []:= x
goto begin_while_14_1
#############################################################
#B29
#############################################################


next_while_14_1:
#Este es el código generado por la linea 33 de la instrucción x := a[i]
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t54 + bp 16
=* t55 t54
t56 * i t55
t57 :=[] a t56
x := t57
#Este es el código generado por la linea 34 de la instrucción a[i] := a[n]
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t58 + bp 16
=* t59 t58
t60 * n t59
t61 :=[] a t60
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t62 + bp 16
=* t63 t62
t64 * i t63
a t64 []:= t61
#Este es el código generado por la linea 35 de la instrucción a[n] := x
#Aquí va el acceso a un arreglo que es por referencia ==> dope vector
t66 + bp 16
=* t67 t66
t68 * n t67
a t68 []:= x
#Este es el código generado por la linea 37 de la llamada a la función: quicksort
begin_function
#Aquí debería pasar el parámetro que es un arreglo pero me falta solucionar lo del dope vector
param_ref a  
param -1
param 1
param 4
param j
param m
t70 call quicksort 3
epilogue t70 32
#Este es el código generado por la linea 38 de la llamada a la función: quicksort
begin_function
#Aquí debería pasar el parámetro que es un arreglo pero me falta solucionar lo del dope vector
param_ref a  
param -1
param 1
param 4
param n
t71 + i 1
param t71
t72 call quicksort 3
epilogue t72 32
return
